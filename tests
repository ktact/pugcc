// This is a line comment.

/*
 * This is a block comment.
 */

int ret3() { return 3; }
int ret5() { return 5; }
int add(int x, int y) { return x + y; }
int sub(int x, int y) { return x - y; }
int add6(int a, int b, int c, int d, int e, int f) {
    return a + b + c + d + e + f;
}
int fib(int x) {
    if (x <= 1)
        return 1;
    return fib(x-1) + fib(x-2);
}
int ga[4];
int subtract_char(char a, char b, char c) {
    return a-b-c;
}

int assert(int expected, int actual, char *code) {
    if (expected == actual) {
        printf("%s => %d\n", code, actual);
    } else {
        printf("%s => %d expected but got %d\n", code, expected, actual);
        exit(1);
    }
}

int main() {
    assert( 0,           0,             "0");
    assert(42,          42,            "42");
    assert( 0,           0,             "0");
    assert(21,      5+20-4,        "5+20-4");
    assert(41, 12 + 34 - 5 , "12 + 34 - 5 ");
    assert(47,       5+6*7,         "5+6*7");
    assert(15,     5*(9-6),       "5*(9-6)");
    assert( 4,     (3+5)/2,       "(3+5)/2");
    assert(10,      -10+20,        "-10+20");
    assert(10,       - -10,         "- -10");
    assert(10,     - - +10,       "- - +10");

    assert(0,   0==1,   "0==1");
    assert(1, 42==42, "42==42");
    assert(1,   0!=1,   "0!=1");
    assert(0, 42!=42, "42!=42");

    assert(1,  0<1,  "0<1");
    assert(0,  1<1,  "1<1");
    assert(0,  2<1,  "2<1");
    assert(1, 0<=1, "0<=1");
    assert(1, 1<=1, "1<=1");
    assert(0, 2<=1, "2<=1");

    assert(1,  1>0,  "1>0");
    assert(0,  1>1,  "1>1");
    assert(1, 1>=0, "1>=0");
    assert(1, 1>=1, "1>=1");
    assert(0, 1>=2, "1>=2");

    assert(3, ({ int foo=3; foo; }), "int foo=3; foo;");

    assert(4, ({ int foo=3; int bar=5; (foo+bar)/2; }), "int foo=3; int bar=5; (foo+bar)/2;");

    assert(3, ({ int x; if (0)   x=2; else x=3; x; }), "int x; if (0)   x=2; else x=3; x;");
    assert(3, ({ int x; if (1-1) x=2; else x=3; x; }), "int x; if (1-1) x=2; else x=3; x;");
    assert(2, ({ int x; if (1)   x=2; else x=3; x; }), "int x; if (1)   x=2; else x=3; x;");
    assert(2, ({ int x; if (2-1) x=2; else x=3; x; }), "int x; if (2-1) x=2; else x=3; x;");

    assert(10, ({ int i=0; while (i < 10) i++;   i; }), "int i=0; while (i < 10) i++; i;");
    assert( 0, ({ int i=0; while (0)      i=1; i; }), "int i=0; while (0)        i=1; i;");

    assert(9, ({ int ret=0; int i; for (i = 0; i < 10; i++) ret = i; ret; }), "int ret=0; int i; for (i = 0; i < 10; i++) ret = i; ret;");
    assert(0, ({ int ret=0; int i; for (i = 0; i <  1; i++) ret = i; ret; }), "int ret=0; int i; for (i = 0; i <  1; i++) ret = i; ret;");

    assert(10, ({ int ret=0; for (;ret < 10;) ret++; ret; }), "int ret=0; for (;ret < 10;) ret++; ret;");

    assert( 3, ({ 1;  2;  3; }), "1;  2;  3;");
    assert( 3, ({ 1; {2;} 3; }), "1; {2;} 3;");

    assert(55, ({ int i;int j;i=0;j=0;while(i<=10){ j=i+j;i=i+1;} j; }), "int i;int j;i=0;j=0;while(i<=10){ j=i+j;i=i+1;} j;");

    assert(3, ({ ret3(); }), "ret3();");
    assert(5, ({ ret5(); }), "ret5();");

    assert(3, ({ int x=1; int y=2; add(x,y); }), "int x=1; int y=2; add(x,y);");
    assert(1, ({ int x=2; int y=1; sub(x,y); }), "int x=2; int y=1; sub(x,y);");

    assert(21, ({ add6(1,2,3,4,5,6); }), "add6(1,2,3,4,5,6);");

    assert(55, ({ fib(9); }), "fib(9);");

    assert(3, ({ int x=3; *&x; }), "int x=3; *&x;");
    //assert(3, ({ int x=3; int y=&x; int z=&y; **z; }), "int x=3; int y=&x; int z=&y; **z;");

    assert(3, ({ int x; int *y=&x; *y=3; x; }), "int x; int *y=&x; *y=3; x");

    int array[4]; array[0]=1; array[1]=2; array[2]=4; array[3]=8;
    assert(2, ({ int *p=array; int *q;        q=p+1;  *q; }), "int *p=array; int *q;        q=p+1;  *q;"); 
    assert(4, ({ int *p=array; int *q;        q=p+2;  *q; }), "int *p=array; int *q;        q=p+2;  *q;");
    assert(8, ({ int *p=array; int *q;        q=p+3;  *q; }), "int *p=array; int *q;        q=p+3;  *q;");
    assert(4, ({ int *p=array; int *q; p=p+3; q=p-1;  *q; }), "int *p=array; int *q; p=p+3; q=p-1;  *q;");
    assert(2, ({ int *p=array; int *q; p=p+3; q=p-2;  *q; }), "int *p=array; int *q; p=p+3; q=p-2;  *q;");
    assert(1, ({ int *p=array; int *q; p=p+3; q=p-3;  *q; }), "int *p=array; int *q; p=p+3; q=p-3;  *q;");

    assert(4, ({ int x;  sizeof(x); }),   "int x;  sizeof(x);");
    assert(8, ({ int *x; sizeof(x); }),   "int *x; sizeof(x);");
    assert(4, ({ int x;  sizeof(x+3); }), "int x;  sizeof(x+3);");
    assert(4, ({ int x;  sizeof(x-2); }), "int x;  sizeof(x-2);");
    assert(4, ({ int *x; sizeof(*x); }),  "int *x; sizeof(*x);");
    assert(8, ({ int x;  sizeof(&x); }),  "int x;  sizeof(&x);");
    assert(4, ({ sizeof(1); }), "sizeof(1);");
    assert(4, ({ sizeof(sizeof(1)); }), "sizeof(sizeof(1));");
    assert(40, ({ int a[10]; sizeof(a); }), "int a[10]; sizeof(a);");

    assert(3, ({ int a[2]; *a=1; *(a+1)=2; int *p; p=a; *p+*(p+1); }), "int a[2]; *a=1; *(a+1)=2; int *p; p=a; *p+*(p+1);");

    assert(3, ({ int x;     x=3;            x; }),     "int x;     x=3;            x;");
    assert(3, ({ int x[2]; *x=3;           *x; }),     "int x[2]; *x=3;           *x;");
    assert(3, ({ int x[1]; int y[1]; *y=3; *y; }),     "int x[1]; int y[1]; *y=3; *y;");
    assert(3, ({ int x[1]; *x=3;           *x; }),     "int x[1]; *x=3;           *x;");
    assert(3, ({ int x[3]; *x=3;           *x; }),     "int x[3]; *x=3;           *x;");
    assert(4, ({ int x[3]; *(x+1)=4;       *(x+1); }), "int x[3]; *(x+1)=4;       *(x+1);");
    assert(5, ({ int x[3]; *(x+2)=5;       *(x+2); }), "int x[3]; *(x+2)=5;       *(x+2);");

    assert(3, ({ int x[3]; x[0]=3; x[0]; }), "int x[3]; x[0]=3; x[0];");
    assert(4, ({ int x[3]; x[1]=4; x[1]; }), "int x[3]; x[1]=4; x[1];");
    assert(5, ({ int x[3]; x[2]=5; x[2]; }), "int x[3]; x[2]=5; x[2];");

    assert(0, ({ ga[0]; }), "ga[0];");
    assert(0, ({ ga[0]=0; ga[1]=1; ga[2]=2; ga[3]=3; ga[0]; }), "ga[0]=0; ga[1]=1; ga[2]=2; ga[3]=3; ga[0];");
    assert(1, ({ ga[0]=0; ga[1]=1; ga[2]=2; ga[3]=3; ga[1]; }), "ga[0]=0; ga[1]=1; ga[2]=2; ga[3]=3; ga[1];");
    assert(2, ({ ga[0]=0; ga[1]=1; ga[2]=2; ga[3]=3; ga[2]; }), "ga[0]=0; ga[1]=1; ga[2]=2; ga[3]=3; ga[2];");
    assert(3, ({ ga[0]=0; ga[1]=1; ga[2]=2; ga[3]=3; ga[3]; }), "ga[0]=0; ga[1]=1; ga[2]=2; ga[3]=3; ga[3];");

    assert(1, ({ char x=1;           x; }), "char x=1;           x;");
    assert(1, ({ char x=1; char y=2; x; }), "char x=1; char y=2; x;");
    assert(2, ({ char x=1; char y=2; y; }), "char x=1; char y=2; y;");

    assert(1, ({ char x; sizeof(x); }), "char x; sizeof(x);");

    assert(1, ({ subtract_char(7, 3, 3); }), "subtract_char(7, 3, 3);");

    assert(97, ({ "abc"[0]; }), "\"abc\"[0];");
    assert(98, ({ "abc"[1]; }), "\"abc\"[1];");
    assert(99, ({ "abc"[2]; }), "\"abc\"[2];");
    assert( 0, ({ "abc"[3]; }), "\"abc\"[3];");
    assert( 4, ({ sizeof("abc"); }), "sizeof(\"abc\");");

    assert( 7, ({ "\a"[0]; }), "\"\\a\"[0];");
    assert( 8, ({ "\b"[0]; }), "\"\\b\"[0];");
    assert( 9, ({ "\t"[0]; }), "\"\\t\"[0];");
    assert(10, ({ "\n"[0]; }), "\"\\n\"[0];");
    assert(11, ({ "\v"[0]; }), "\"\\v\"[0];");
    assert(12, ({ "\f"[0]; }), "\"\\f\"[0];");
    assert(13, ({ "\r"[0]; }), "\"\\r\"[0];");
    assert(27, ({ "\e"[0]; }), "\"\\e\"[0];");
    assert( 0, ({ "\0"[0]; }), "\"\\0\"[0];");

    assert(2, ({ int x=2; { int x=3; }          x; }), "int x=2; { int x=3; }          x;");
    assert(2, ({ int x=2; { int x=3; } int y=4; x; }), "int x=2; { int x=3; } int y=4; x;");
    assert(3, ({ int x=2; {     x=3; }          x; }), "int x=2; {     x=3; }          x;");

    assert(0, ({ ({ 0; }); }), "({ 0; });");
    assert(2, ({ ({ 0; 1; 2; }); }), "({ 0; 1; 2; });");
    assert(3, ({ ({ int x=3; x; }); }), "({ int x=3; x; });");

    assert(1, ({ struct { int a; int b; } x; x.a=1; x.b=2; x.a; }), "struct { int a; int b; } x; x.a=1; x.b=2; x.a");
    assert(2, ({ struct { int a; int b; } x; x.a=1; x.b=2; x.b; }), "struct { int a; int b; } x; x.a=1; x.b=2; x.b");

    assert(1, ({ struct { char a; int b; char c; } x; x.a=1; x.b=2; x.c=3; x.a; }), "struct { char a; int b; char c; } x; x.a=1; x.b=2; x.c=3; x.a;");
    assert(2, ({ struct { char a; int b; char c; } x; x.a=1; x.b=2; x.c=3; x.b; }), "struct { char a; int b; char c; } x; x.a=1; x.b=2; x.c=3; x.b;");
    assert(3, ({ struct { char a; int b; char c; } x; x.a=1; x.b=2; x.c=3; x.c; }), "struct { char a; int b; char c; } x; x.a=1; x.b=2; x.c=3; x.c;");

    assert( 1, ({ struct { char a; }          x; sizeof(x.a);    }), "struct { char a; }          x; sizeof(x.a);   ");
    assert( 4, ({ struct { int  a; }          x; sizeof(x.a);    }), "struct { int  a; }          x; sizeof(x.a);   ");
    assert( 4, ({ struct { int  a; }          x; sizeof(x);      }), "struct { int  a; }          x; sizeof(x);     ");
    assert( 4, ({ struct { int  a; int  b; }  x; sizeof(x.a);    }), "struct { int  a; int  b; }  x; sizeof(x.a);   ");
    assert( 4, ({ struct { int  a; int  b; }  x; sizeof(x.b);    }), "struct { int  a; int  b; }  x; sizeof(x.b);   ");
    assert( 8, ({ struct { int  a; int  b; }  x; sizeof(x);      }), "struct { int  a; int  b; }  x; sizeof(x);     ");
    assert(12, ({ struct { int  a[3]; }       x; sizeof(x);      }), "struct { int  a[3]; }       x; sizeof(x);     ");
    assert( 1, ({ struct { char a; char b; }  x; sizeof(x.a);    }), "struct { char a; char b; }  x; sizeof(x.a);   ");
    assert( 1, ({ struct { char a; char b; }  x; sizeof(x.b);    }), "struct { char a; char b; }  x; sizeof(x.b);   ");
    assert( 2, ({ struct { char a; char b; }  x; sizeof(x);      }), "struct { char a; char b; }  x; sizeof(x);     ");
    assert( 1, ({ struct { char a; int  b; }  x; sizeof(x.a);    }), "struct { char a; int  b; }  x; sizeof(x.a);   ");
    assert( 4, ({ struct { char a; int  b; }  x; sizeof(x.b);    }), "struct { char a; int  b; }  x; sizeof(x.b);   ");
    assert( 8, ({ struct { char a; int  b; }  x; sizeof(x);      }), "struct { char a; int  b; }  x; sizeof(x);     ");
    assert( 8, ({ struct { int  a; char b; }  x; sizeof(x);      }), "struct { char a; int  b; }  x; sizeof(x);     ");

    assert( 8, ({ struct t { int a; int b; } x; struct t y; sizeof(y); }), "struct t {int a; int b;} x; struct t y; sizeof(y);");
    assert( 8, ({ struct t { int a; int b; };   struct t y; sizeof(y); }), "struct t {int a; int b;};   struct t y; sizeof(y);");
    assert( 2, ({ struct t { char a[2];    }; { struct t {char a[4];}; } struct t y; sizeof(y); }), "struct t {char a[2];}; { struct t {char a[4];}; } struct t y; sizeof(y);");

    assert(3, ({ struct t {char a;} x; struct t *y; y=&x; x.a=3; (*y).a; }), "struct t {char a;} x; struct t *y; y=&x; x.a=3; (*y).a;");
    assert(3, ({ struct t {char a;} x; struct t *y; y=&x; x.a=3; y->a; }), "struct t {char a;} x; struct t *y; y=&x; x.a=3; y->a;");
    assert(3, ({ struct t {char a;} x; struct t *y; y=&x; y->a=3; x.a; }), "struct t {char a;} x; struct t *y; y=&x; y->a=3; x.a;");

    assert(3, ({ int i=2; ++i; }), "int i=2; ++i;");
    assert(1, ({ int i=2; --i; }), "int i=2; --i;");
    assert(2, ({ int i=2; i++; }), "int i=2; i++;");
    assert(2, ({ int i=2; i--; }), "int i=2; i--;");

    assert(3, ({ int i=2; i++; i; }), "int i=2; i++; i;");
    assert(1, ({ int i=2; i--; i; }), "int i=2; i--; i;");

    assert(1, ({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p++; }), "int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p++;");
    assert(2, ({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; ++*p; }), "int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; ++*p;");
    assert(1, ({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p--; }), "int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p--;");
    assert(0, ({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; --*p; }), "int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; --*p;");

    assert(0, ({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[0]; }), "int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++); a[0];");
    assert(0, ({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[1]; }), "int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++); a[1];");
    assert(2, ({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[2]; }), "int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++); a[2];");
    assert(2, ({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--;   *p; }), "int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++);   *p;");

    assert(1, ({ char a[3]; a[0]=0; a[1]=1; a[2]=2; char *p=a+1; *p++; }), "char a[3]; a[0]=0; a[1]=1; a[2]=2; char *p=a+1; *p++;");
    assert(0, ({ char a[3]; a[0]=0; a[1]=1; a[2]=2; char *p=a+1; (*p++)--; a[0]; }), "char a[3]; a[0]=0; a[1]=1; a[2]=2; char *p=a+1; (*p++); a[0];");

    assert(0, ({ int x[2][3]; int *y=x; *y=0; **x; }), "int x[2][3]; int *y=x; *y=0; **x;");
    //assert(1, ({ int x[2][3]; int *y=x; *(y+1)=1; *(*x+1); }), "int x[2][3]; int *y=x; *(y+1)=1; *(*x+1);");
    //assert(2, ({ int x[2][3]; int *y=x; *(y+2)=2; *(*x+2); }), "int x[2][3]; int *y=x; *(y+2)=2; *(*x+2);");
    assert(3, ({ int x[2][3]; int *y=x; *(y+3)=3; **(x+1); }), "int x[2][3]; int *y=x; *(y+3)=3; **(x+1);");
    //assert(4, ({ int x[2][3]; int *y=x; *(y+4)=4; *(*(x+1)+1); }), "int x[2][3]; int *y=x; *(y+4)=4; *(*(x+1)+1);");
    //assert(5, ({ int x[2][3]; int *y=x; *(y+5)=5; *(*(x+1)+2); }), "int x[2][3]; int *y=x; *(y+5)=5; *(*(x+1)+2);");
    assert(6, ({ int x[2][3]; int *y=x; *(y+6)=6; **(x+2); }), "int x[2][3]; int *y=x; *(y+6)=6; **(x+2);");

    assert(0, ({ int x[2][3]; int *y=x; y[0]=0; x[0][0]; }), "int x[2][3]; int *y=x; y[0]=0; x[0][0];");
    assert(1, ({ int x[2][3]; int *y=x; y[1]=1; x[0][1]; }), "int x[2][3]; int *y=x; y[1]=1; x[0][1];");
    assert(2, ({ int x[2][3]; int *y=x; y[2]=2; x[0][2]; }), "int x[2][3]; int *y=x; y[2]=2; x[0][2];");
    assert(3, ({ int x[2][3]; int *y=x; y[3]=3; x[1][0]; }), "int x[2][3]; int *y=x; y[3]=3; x[1][0];");
    assert(4, ({ int x[2][3]; int *y=x; y[4]=4; x[1][1]; }), "int x[2][3]; int *y=x; y[4]=4; x[1][1];");
    assert(5, ({ int x[2][3]; int *y=x; y[5]=5; x[1][2]; }), "int x[2][3]; int *y=x; y[5]=5; x[1][2];");
    assert(6, ({ int x[2][3]; int *y=x; y[6]=6; x[2][0]; }), "int x[2][3]; int *y=x; y[6]=6; x[2][0];");

    assert(48, ({ int x[3][4]; sizeof(x); }), "int x[3][4]; sizeof(x);");
    assert(16, ({ int x[3][4]; sizeof(*x); }), "int x[3][4]; sizeof(*x);");
    assert(4, ({ int x[3][4]; sizeof(**x); }), "int x[3][4]; sizeof(**x);");
    assert(5, ({ int x[3][4]; sizeof(**x) + 1; }), "int x[3][4]; sizeof(**x) + 1;");
    assert(5, ({ int x[3][4]; sizeof **x + 1; }), "int x[3][4]; sizeof **x + 1;");
    //assert(8, ({ int x[3][4]; sizeof(**x + 1); }), "int x[3][4]; sizeof(**x + 1);");

    printf("OK\n");

    return 0;
}
